// <auto-generated />
using System;
using MYNEWS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MYNEWS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240308183845_mig01")]
    partial class mig01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AuthorNews", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsId", "NewsId");

                    b.HasIndex("NewsId");

                    b.ToTable("AuthorNews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MYNEWS.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserFName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MYNEWS.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("MYNEWS.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4807ed0b-8863-42d5-a381-81c5ee0b6494"),
                            CategoryName = "Health",
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6335),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c88c7808-9f2e-4521-be75-0b7000dd5050"),
                            CategoryName = "Business",
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6338),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c0b351ce-23c9-4ea2-a642-071f5a5fb720"),
                            CategoryName = "Technology",
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6340),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a5feb6ec-ef90-4fcf-adaa-6291db80e6bb"),
                            CategoryName = "Society and Culture",
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6341),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9f25fa00-e334-4d42-8bd1-5ec74e1db120"),
                            CategoryName = "Education",
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6343),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("MYNEWS.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("NewsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Vote")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("NewsId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MYNEWS.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LongPhotoPathForCategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPathForCategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPathForFeatured")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPathForTrending")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPathForUserComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPathSingleBig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubcategoryId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15cb084c-b8e0-4e7d-9308-5fca3ab68a01"),
                            Content = "Now it's possible. How? Let's dive in:",
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6255),
                            IsDeleted = false,
                            PhotoPathForTrending = "img/news-100x100-1.jpg",
                            Title = "Medicine can now put a stop to cancer"
                        },
                        new
                        {
                            Id = new Guid("4ac322d8-7bce-4c55-8a12-7e120663198a"),
                            Content = "This is easy",
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6260),
                            IsDeleted = false,
                            PhotoPathForTrending = "img/news-100x100-2.jpg",
                            Title = "How can you increase your efficiency in your business?"
                        },
                        new
                        {
                            Id = new Guid("958f816f-c182-47e2-b46e-5dde9d812e7d"),
                            Content = "Here in this article, we have listed them for you. Continue:",
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6262),
                            IsDeleted = false,
                            PhotoPathForTrending = "img/news-100x100-3.jpg",
                            Title = "The best technological products released this year?"
                        },
                        new
                        {
                            Id = new Guid("bae39aa4-72c3-41d3-84a2-03856e3086ec"),
                            Content = "Research on this has ended. Here are the main reasons:",
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6264),
                            IsDeleted = false,
                            PhotoPathForTrending = "img/news-100x100-5.jpg",
                            Title = "Why are women usually afraid of guns?"
                        },
                        new
                        {
                            Id = new Guid("de45998a-ca05-49c1-803f-788329259fdf"),
                            Content = "The Ministry of Education announced its decision:",
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6266),
                            IsDeleted = false,
                            PhotoPathSingleBig = "img/news-700x435-1.jpg",
                            Title = "Important development for kindergartens"
                        });
                });

            modelBuilder.Entity("MYNEWS.Entities.NewsTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NewsTags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf6ac7b0-9bf9-4d4f-924d-d263d95808de"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6425),
                            IsDeleted = false,
                            TagName = "#Health"
                        },
                        new
                        {
                            Id = new Guid("6b3edd30-4444-4ee0-9c1f-dc798e3a512c"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6430),
                            IsDeleted = false,
                            TagName = "#MedicalAdvancements"
                        },
                        new
                        {
                            Id = new Guid("11ecaa36-e82e-4a6e-9da0-a2477822fa2c"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6432),
                            IsDeleted = false,
                            TagName = "#CancerResearch"
                        },
                        new
                        {
                            Id = new Guid("4b3fbeb9-827a-4978-996b-e9f36772c9bf"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6434),
                            IsDeleted = false,
                            TagName = "#TreatmentOptions"
                        },
                        new
                        {
                            Id = new Guid("acbe374a-3387-4553-a3bc-b4615323443d"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6435),
                            IsDeleted = false,
                            TagName = "#Efficiency"
                        },
                        new
                        {
                            Id = new Guid("bff43dc9-e3d7-47ad-8499-0d2b0acde8a5"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6438),
                            IsDeleted = false,
                            TagName = "#BusinessTips"
                        },
                        new
                        {
                            Id = new Guid("3ae82180-0eff-4f08-8446-7ef96f4cb107"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6443),
                            IsDeleted = false,
                            TagName = "#Productivity"
                        },
                        new
                        {
                            Id = new Guid("9cf1fd52-7d8b-4ad2-ae1f-15df30bad816"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6454),
                            IsDeleted = false,
                            TagName = "#StrategicManagement"
                        },
                        new
                        {
                            Id = new Guid("7e8b2676-680b-45ba-ad3b-21ea0ac18918"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6455),
                            IsDeleted = false,
                            TagName = "#Technology"
                        },
                        new
                        {
                            Id = new Guid("6285405f-14fd-4130-831c-b3222c8f9d02"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6458),
                            IsDeleted = false,
                            TagName = "#TechProducts"
                        },
                        new
                        {
                            Id = new Guid("b3cdd45d-66d1-40c0-990f-64ec92f36899"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6460),
                            IsDeleted = false,
                            TagName = "#Innovation"
                        },
                        new
                        {
                            Id = new Guid("7c07d96c-3dae-4c02-a930-6f504709ce24"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6462),
                            IsDeleted = false,
                            TagName = "#TechTrends"
                        },
                        new
                        {
                            Id = new Guid("3e7b7949-6af9-4a15-997e-74f7482d42ca"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6463),
                            IsDeleted = false,
                            TagName = "#GenderRoles"
                        },
                        new
                        {
                            Id = new Guid("343d0497-5d7d-43a3-8973-97649a1cd0ee"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6465),
                            IsDeleted = false,
                            TagName = "#GunSafety"
                        },
                        new
                        {
                            Id = new Guid("5af96887-2cf4-49f2-a6ad-eea15500e4ba"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6470),
                            IsDeleted = false,
                            TagName = "#Women"
                        },
                        new
                        {
                            Id = new Guid("886ddfec-c611-41d1-9f28-51455f059bc7"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6472),
                            IsDeleted = false,
                            TagName = "#SocietalFear"
                        },
                        new
                        {
                            Id = new Guid("d7b41864-f553-4d3e-817f-6021949b75bf"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6473),
                            IsDeleted = false,
                            TagName = "#Education"
                        },
                        new
                        {
                            Id = new Guid("fd3860b5-0974-4799-b356-baa7089d125c"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6476),
                            IsDeleted = false,
                            TagName = "#Kindergarten"
                        },
                        new
                        {
                            Id = new Guid("d746b569-f317-4b77-8256-34d2c7baa1a0"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6478),
                            IsDeleted = false,
                            TagName = "#ChildDevelopment"
                        },
                        new
                        {
                            Id = new Guid("a8b92c25-d055-43e7-be20-c4e936cf8b93"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6479),
                            IsDeleted = false,
                            TagName = "#EarlyEducation"
                        });
                });

            modelBuilder.Entity("MYNEWS.Entities.Subcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SubcategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0411fb60-5c6b-437d-9f39-7b14047a1a3a"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6377),
                            IsDeleted = false,
                            SubcategoryName = "Medical and Health News"
                        },
                        new
                        {
                            Id = new Guid("cfaefa09-b6c2-48e5-805c-b3c9d32261c5"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6381),
                            IsDeleted = false,
                            SubcategoryName = "Strategic Management and Planning"
                        },
                        new
                        {
                            Id = new Guid("21801b3a-7486-44d5-9df2-ab67b2137b6f"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6383),
                            IsDeleted = false,
                            SubcategoryName = "Information Technology and Information Systems"
                        },
                        new
                        {
                            Id = new Guid("070ffe26-d467-49d6-b864-939a857eb9f3"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6388),
                            IsDeleted = false,
                            SubcategoryName = "Gender and Analysis of Gender Roles in Society"
                        },
                        new
                        {
                            Id = new Guid("803775d6-b369-4f8b-a7e5-b78577925f17"),
                            CreatedAt = new DateTime(2024, 3, 8, 18, 38, 45, 367, DateTimeKind.Utc).AddTicks(6390),
                            IsDeleted = false,
                            SubcategoryName = "Schools and Educational Institutions"
                        });
                });

            modelBuilder.Entity("NewsNewsTag", b =>
                {
                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewsTagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NewsId", "NewsTagsId");

                    b.HasIndex("NewsTagsId");

                    b.ToTable("NewsNewsTag");
                });

            modelBuilder.Entity("AuthorNews", b =>
                {
                    b.HasOne("MYNEWS.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYNEWS.Entities.News", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MYNEWS.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MYNEWS.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYNEWS.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MYNEWS.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MYNEWS.Entities.Comment", b =>
                {
                    b.HasOne("MYNEWS.Entities.AppUser", "AppUser")
                        .WithMany("Comments")
                        .HasForeignKey("AppUserId");

                    b.HasOne("MYNEWS.Entities.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId");

                    b.Navigation("AppUser");

                    b.Navigation("News");
                });

            modelBuilder.Entity("MYNEWS.Entities.News", b =>
                {
                    b.HasOne("MYNEWS.Entities.Category", "Category")
                        .WithMany("News")
                        .HasForeignKey("CategoryId");

                    b.HasOne("MYNEWS.Entities.Subcategory", "Subcategory")
                        .WithMany("News")
                        .HasForeignKey("SubcategoryId");

                    b.Navigation("Category");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("MYNEWS.Entities.Subcategory", b =>
                {
                    b.HasOne("MYNEWS.Entities.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NewsNewsTag", b =>
                {
                    b.HasOne("MYNEWS.Entities.News", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYNEWS.Entities.NewsTag", null)
                        .WithMany()
                        .HasForeignKey("NewsTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MYNEWS.Entities.AppUser", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MYNEWS.Entities.Category", b =>
                {
                    b.Navigation("News");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("MYNEWS.Entities.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MYNEWS.Entities.Subcategory", b =>
                {
                    b.Navigation("News");
                });
#pragma warning restore 612, 618
        }
    }
}
