// <auto-generated />
using System;
using MYNEWS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MYNEWS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AuthorNews", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsId", "NewsId");

                    b.HasIndex("NewsId");

                    b.ToTable("AuthorNews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b1a03e9e-a949-44f7-be1e-786235131781",
                            ConcurrencyStamp = "2d7822ee-a159-45b8-934f-0e271ab60f6f",
                            Name = "None",
                            NormalizedName = "NONE"
                        },
                        new
                        {
                            Id = "2533dbf7-2f8c-4a34-a384-683ea4a09888",
                            ConcurrencyStamp = "a02a92e0-eb07-4476-81d0-30c1600ae50e",
                            Name = "Admin",
                            NormalizedName = "ADMİN"
                        },
                        new
                        {
                            Id = "3216ef84-b790-45f1-b9a3-649e8f999203",
                            ConcurrencyStamp = "34ccee16-d3dc-45b0-bc42-7209b78e45d1",
                            Name = "Client",
                            NormalizedName = "CLİENT"
                        },
                        new
                        {
                            Id = "290474d2-f5fe-47f4-9a33-6940d6475cef",
                            ConcurrencyStamp = "5ca0ee0a-ad68-4143-b5e3-e09076bc044d",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MYNEWS.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserFName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MYNEWS.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("MYNEWS.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LongPhotoPathForCategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("732f0bab-a28f-4270-bfab-03e3604f55c4"),
                            CategoryName = "Health",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(55),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fe74338f-17c3-4a10-a413-a57284c48bb2"),
                            CategoryName = "Business",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(63),
                            IsDeleted = false,
                            LongPhotoPathForCategories = "img/cat-500x80-1.jpg"
                        },
                        new
                        {
                            Id = new Guid("bbcdfb5c-0f5e-4faa-bef6-3da80d5b9e7d"),
                            CategoryName = "Technology",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(70),
                            IsDeleted = false,
                            LongPhotoPathForCategories = "img/cat-500x80-2.jpg"
                        },
                        new
                        {
                            Id = new Guid("15fbad38-fe44-4fdd-b037-47062e4ac3dc"),
                            CategoryName = "Society and Culture",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(73),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("38c7f3fd-5ac2-47b2-84eb-a5f2a345f6d2"),
                            CategoryName = "Education",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(76),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8c6bb045-2ebf-48f8-ba98-d8af41f14ae1"),
                            CategoryName = "Sport",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(79),
                            IsDeleted = false,
                            LongPhotoPathForCategories = "img/cat-500x80-4.jpg"
                        },
                        new
                        {
                            Id = new Guid("a2750746-dacf-4c4d-9dd8-b41028bbc8a8"),
                            CategoryName = "Entertainment",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(81),
                            IsDeleted = false,
                            LongPhotoPathForCategories = "img/cat-500x80-3.jpg"
                        });
                });

            modelBuilder.Entity("MYNEWS.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("NewsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Vote")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("NewsId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MYNEWS.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPathForCategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPathForFeatured")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPathForTrending")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPathForUserComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPathSingleBig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubcategoryId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61182b8f-7c7a-4250-8e12-c7dbd1a8ba26"),
                            Content = "Now it's possible. How? Let's dive in:",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 475, DateTimeKind.Utc).AddTicks(9962),
                            IsDeleted = false,
                            PhotoPathForTrending = "img/news-100x100-1.jpg",
                            Title = "Medicine can now put a stop to cancer",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = new Guid("b32cc1fa-b341-4d16-81e7-3313fb947a6a"),
                            Content = "This is easy",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 475, DateTimeKind.Utc).AddTicks(9970),
                            IsDeleted = false,
                            PhotoPathForTrending = "img/news-100x100-2.jpg",
                            Title = "How can you increase your efficiency in your business?",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = new Guid("d927a365-330d-4dc4-be2b-ea480dddb01a"),
                            Content = "Here in this article, we have listed them for you. Continue:",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 475, DateTimeKind.Utc).AddTicks(9973),
                            IsDeleted = false,
                            PhotoPathForTrending = "img/news-100x100-3.jpg",
                            Title = "The best technological products released this year?",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = new Guid("5e3fc979-2e3d-42aa-b53e-0fa244a324eb"),
                            Content = "Research on this has ended. Here are the main reasons:",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 475, DateTimeKind.Utc).AddTicks(9975),
                            IsDeleted = false,
                            PhotoPathForTrending = "img/news-100x100-5.jpg",
                            Title = "Why are women usually afraid of guns?",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = new Guid("c30200d4-9042-4243-ab12-05d7add27c54"),
                            Content = "The Ministry of Education announced its decision:",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 475, DateTimeKind.Utc).AddTicks(9977),
                            IsDeleted = false,
                            PhotoPathSingleBig = "img/news-700x435-1.jpg",
                            Title = "Important development for kindergartens",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = new Guid("a9c94341-6208-41f3-b405-ec5b9f6fd2bc"),
                            Content = "Are you ready to take your bodybuilding journey to the next level? Achieving optimal results in bodybuilding requires more than just lifting weights aimlessly. It demands a strategic approach, incorporating effective training techniques tailored to your goals and body type. Here are some key strategies to help you maximize your workouts and achieve the gains you desire:\r\n\r\n1. *Progressive Overload:* One of the fundamental principles of bodybuilding is progressive overload. This involves gradually increasing the stress placed on your muscles over time to stimulate growth. Whether it's adding more weight to your lifts, increasing the number of reps, or shortening rest periods between sets, consistently challenging your muscles is essential for continual progress. 2. *Compound Movements:* Focus on compound exercises that target multiple muscle groups simultaneously, such as squats, deadlifts, bench presses, and pull-ups. These compound movements not only build strength and muscle mass more efficiently but also engage stabilizing muscles, enhancing overall muscle development and functional strength.",
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 475, DateTimeKind.Utc).AddTicks(9983),
                            IsDeleted = false,
                            PhotoPathForCategories = "img/Jerry Ossi_992401984_o.jpg",
                            PhotoPathSingleBig = "img/Jerry Ossi_992401984_o.jpg",
                            Title = "Effective Training Techniques for Optimal Results",
                            ViewsCount = 0
                        });
                });

            modelBuilder.Entity("MYNEWS.Entities.NewsTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NewsTags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b21e1c41-d725-4ba1-927a-a593b85d3f05"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(201),
                            IsDeleted = false,
                            TagName = "#Health"
                        },
                        new
                        {
                            Id = new Guid("9be9026f-ef57-4540-b790-50296ea51e85"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(205),
                            IsDeleted = false,
                            TagName = "#MedicalAdvancements"
                        },
                        new
                        {
                            Id = new Guid("2068b0fa-7c97-4340-8bd9-68e68e9f3e87"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(207),
                            IsDeleted = false,
                            TagName = "#CancerResearch"
                        },
                        new
                        {
                            Id = new Guid("d521156a-98f6-4151-9bfc-d2c7c548cbec"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(209),
                            IsDeleted = false,
                            TagName = "#TreatmentOptions"
                        },
                        new
                        {
                            Id = new Guid("6f03a45c-da63-42ea-b7f4-b23cee83db71"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(211),
                            IsDeleted = false,
                            TagName = "#Efficiency"
                        },
                        new
                        {
                            Id = new Guid("f7e0332a-16f5-4afc-8017-ed8b09776b9d"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(213),
                            IsDeleted = false,
                            TagName = "#BusinessTips"
                        },
                        new
                        {
                            Id = new Guid("448c3feb-e859-4283-9317-0e3b7da3d1a8"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(218),
                            IsDeleted = false,
                            TagName = "#Productivity"
                        },
                        new
                        {
                            Id = new Guid("f4aa00b4-a14d-45c4-a6b3-c016ebbf4d7a"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(220),
                            IsDeleted = false,
                            TagName = "#StrategicManagement"
                        },
                        new
                        {
                            Id = new Guid("0c4ae89d-0ecc-4824-ad3b-b60bfbc778ce"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(222),
                            IsDeleted = false,
                            TagName = "#Technology"
                        },
                        new
                        {
                            Id = new Guid("61718f5b-3bd3-4237-88b4-65ccd3422415"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(226),
                            IsDeleted = false,
                            TagName = "#TechProducts"
                        },
                        new
                        {
                            Id = new Guid("47d63de6-6174-4baa-888a-f87ad72c3a41"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(228),
                            IsDeleted = false,
                            TagName = "#Innovation"
                        },
                        new
                        {
                            Id = new Guid("d12a32c7-33b8-4fba-8d04-a959480291bb"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(230),
                            IsDeleted = false,
                            TagName = "#TechTrends"
                        },
                        new
                        {
                            Id = new Guid("137d23f4-add3-4dd0-8038-77c0a512641b"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(231),
                            IsDeleted = false,
                            TagName = "#GenderRoles"
                        },
                        new
                        {
                            Id = new Guid("9e03b9ad-a8a0-4b0b-b9b8-4c5cc55ef09b"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(233),
                            IsDeleted = false,
                            TagName = "#GunSafety"
                        },
                        new
                        {
                            Id = new Guid("1ef68e0f-4b77-438d-8ad5-0d17d437e36e"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(239),
                            IsDeleted = false,
                            TagName = "#Women"
                        },
                        new
                        {
                            Id = new Guid("80599ba0-743f-4e72-9c5a-219d7f2d5b6a"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(241),
                            IsDeleted = false,
                            TagName = "#SocietalFear"
                        },
                        new
                        {
                            Id = new Guid("d6cbf412-c46f-42b0-b597-68cf5f2b5998"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(242),
                            IsDeleted = false,
                            TagName = "#Education"
                        },
                        new
                        {
                            Id = new Guid("88cba31a-2e7d-44ce-8213-356952d07663"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(246),
                            IsDeleted = false,
                            TagName = "#Kindergarten"
                        },
                        new
                        {
                            Id = new Guid("2b640314-b7fb-4b67-9dbb-7d4d8f29ad6f"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(249),
                            IsDeleted = false,
                            TagName = "#ChildDevelopment"
                        },
                        new
                        {
                            Id = new Guid("d1d151d9-ece5-4883-8cf9-b0104e52d71b"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(251),
                            IsDeleted = false,
                            TagName = "#EarlyEducation"
                        });
                });

            modelBuilder.Entity("MYNEWS.Entities.Subcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SubcategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("760055dc-9e98-4295-a4ff-569faef0b51d"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(125),
                            IsDeleted = false,
                            SubcategoryName = "Medical and Health News"
                        },
                        new
                        {
                            Id = new Guid("7d1408c1-13ed-4f76-80e4-7674433a7307"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(131),
                            IsDeleted = false,
                            SubcategoryName = "Strategic Management and Planning"
                        },
                        new
                        {
                            Id = new Guid("66b671ee-e1df-4727-8ab9-e72f05b5e032"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(132),
                            IsDeleted = false,
                            SubcategoryName = "Information Technology and Information Systems"
                        },
                        new
                        {
                            Id = new Guid("c07dd0f5-6890-46a4-86f0-c981ced8331b"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(141),
                            IsDeleted = false,
                            SubcategoryName = "Gender and Analysis of Gender Roles in Society"
                        },
                        new
                        {
                            Id = new Guid("60e27b84-b646-4d13-9722-a8a08f852c86"),
                            CreatedAt = new DateTime(2024, 4, 21, 12, 34, 21, 476, DateTimeKind.Utc).AddTicks(144),
                            IsDeleted = false,
                            SubcategoryName = "Schools and Educational Institutions"
                        });
                });

            modelBuilder.Entity("NewsNewsTag", b =>
                {
                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewsTagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NewsId", "NewsTagsId");

                    b.HasIndex("NewsTagsId");

                    b.ToTable("NewsNewsTag");
                });

            modelBuilder.Entity("AuthorNews", b =>
                {
                    b.HasOne("MYNEWS.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYNEWS.Entities.News", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MYNEWS.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MYNEWS.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYNEWS.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MYNEWS.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MYNEWS.Entities.Comment", b =>
                {
                    b.HasOne("MYNEWS.Entities.AppUser", "AppUser")
                        .WithMany("Comments")
                        .HasForeignKey("AppUserId");

                    b.HasOne("MYNEWS.Entities.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId");

                    b.Navigation("AppUser");

                    b.Navigation("News");
                });

            modelBuilder.Entity("MYNEWS.Entities.News", b =>
                {
                    b.HasOne("MYNEWS.Entities.Category", "Category")
                        .WithMany("News")
                        .HasForeignKey("CategoryId");

                    b.HasOne("MYNEWS.Entities.Subcategory", "Subcategory")
                        .WithMany("News")
                        .HasForeignKey("SubcategoryId");

                    b.Navigation("Category");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("MYNEWS.Entities.Subcategory", b =>
                {
                    b.HasOne("MYNEWS.Entities.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NewsNewsTag", b =>
                {
                    b.HasOne("MYNEWS.Entities.News", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYNEWS.Entities.NewsTag", null)
                        .WithMany()
                        .HasForeignKey("NewsTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MYNEWS.Entities.AppUser", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MYNEWS.Entities.Category", b =>
                {
                    b.Navigation("News");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("MYNEWS.Entities.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MYNEWS.Entities.Subcategory", b =>
                {
                    b.Navigation("News");
                });
#pragma warning restore 612, 618
        }
    }
}
